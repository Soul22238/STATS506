---
title: "Problem Set 1"
format:
  html:
    embed-resources: true
editor: visual
---

Github link: https://github.com/Soul22238/STATS506
# Problem Set 2
## Problem 1
### a
```{r}
#' Function to determine the end position of a random walk using loops
#'
#' @param n number of steps
#' @return The final position of the walk after `n` number of steps
random_walk1 <- function(n){
  cur <- 0
  probs <- 0.5 * c(0.95, 0.05, 0.8, 0.2)
  steps <- sample(c(1, 10, -1, -3), 3*n, prob = probs, replace = TRUE)
  for (i in 1:(3*n)){
    cur <- cur + steps[i]
  }
  return(cur) 
}

#' Function to determine the end position of a random walk using built-in R vectorized functions
#'
#' @param n number of steps
#' @return The final position of the walk after `n` number of steps
random_walk2 <- function(n){
  probs <- 0.5 * c(0.95, 0.05, 0.8, 0.2)
  steps <- sample(c(1, 10, -1, -3), 3*n,  prob = probs, replace = TRUE)
  return (sum(steps))
}

#' Function to determine the end position of a random walk using sapply
#'
#' @param n number of steps
#' @return The final position of the walk after `n` number of steps
random_walk3 <- function(n){
  probs <- 0.5 * c(0.95, 0.05, 0.8, 0.2)
  steps <- sample(c(1, 10, -1, -3), 3*n,  prob = probs, replace = TRUE)
  steps <- matrix(steps, nrow = 1)
  return(apply(steps, 1, sum))

}


random_walk1(10)
random_walk2(10)
random_walk3(10)
random_walk1(1000)
random_walk2(1000)
random_walk3(1000)

```
### b
```{r}
set.seed(15)
random_walk1(10)
set.seed(15)
random_walk2(10)
set.seed(15)
random_walk3(10)
set.seed(15)
random_walk1(1000)
set.seed(15)
random_walk2(1000)
set.seed(15)
random_walk3(1000)
```
### c
```{r}
library(microbenchmark)
set.seed(123)
microbenchmark(
  loop = random_walk1(1000),
  vectorized = random_walk2(1000),
  apply = random_walk3(1000)
)
set.seed(123)
microbenchmark(
  loop = random_walk1(100000),
  vectorized = random_walk2(100000),
  apply = random_walk3(100000)
)
```

### d
```{r}

n_sim = 10000
result1 <- sapply(1:n_sim, function(i) random_walk2(10))

prob1 <- mean(result1 == 0)

result2 <- sapply(1:n_sim, function(i) random_walk2(100))
prob2 <- mean(result2 == 0)

result3 <- sapply(1:n_sim, function(i) random_walk2(1000))
prob3 <- mean(result3 == 0)
prob1
prob2
prob3
```

## Problem 2
```{r}
n <- 10000
n_sim <- n * c(8,8,6,2)
sim <- c(rpois(n_sim[1],1) , rpois(n_sim[2],8), rpois(n_sim[3],12), rnorm(n_sim[4],mean = 60,sd = sqrt(12)))
sum(sim)/n
```
## Problem 3
### a
```{r}
youtube <- read.csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-03-02/youtube.csv')
youtube_clean <- youtube[, !(names(youtube) %in% c(
  "brand",
  "superbowl_ads_dot_com_url",
  "youtube_url",
  "id",
  "etag",
  "published_at",
  "channel_title",
  "thumbnail",
  "title",
  "description"
))]
dim(youtube_clean)
```
### b
i) N/A
ii) View counts, Like counts, Dislike counts, Favorite counts, Comment counts
iii) year, funny, show_product_quickly, patriotic, celebrity, danger, animals, use_sex, kind, category_id

```{r}
cat("=======year========\n")
is.numeric(youtube_clean$year)
hist(youtube_clean$year)

cat("=======funny========\n")
is.numeric(youtube_clean$funny)
class(youtube_clean$funny)
table(youtube_clean$funny, useNA = "ifany")

cat("=======show_product_quickly========\n")
is.numeric(youtube_clean$show_product_quickly)
class(youtube_clean$show_product_quickly)
table(youtube_clean$show_product_quickly, useNA = "ifany")

cat("=======patriotic========\n")
is.numeric(youtube_clean$patriotic)
class(youtube_clean$patriotic)
table(youtube_clean$patriotic, useNA = "ifany")

cat("=======celebrity========\n")
is.numeric(youtube_clean$celebrity)
class(youtube_clean$celebrity)
table(youtube_clean$celebrity, useNA = "ifany")

cat("=======danger========\n")
is.numeric(youtube_clean$danger)
class(youtube_clean$danger)
table(youtube_clean$danger, useNA = "ifany")

cat("=======animals========\n")
is.numeric(youtube_clean$animals)
class(youtube_clean$animals)
table(youtube_clean$animals, useNA = "ifany")

cat("=======use_sex========\n")
is.numeric(youtube_clean$use_sex)
class(youtube_clean$use_sex)
table(youtube_clean$use_sex, useNA = "ifany")

cat("=======kind========\n")
is.numeric(youtube_clean$kind)
class(youtube_clean$kind)
table(youtube_clean$kind, useNA = "ifany")

cat("=======view_count========\n")
is.numeric(youtube_clean$view_count)
hist(youtube_clean$view_count)
table(youtube_clean$view_count, useNA = "ifany")

cat("=======like_count========\n")
is.numeric(youtube_clean$like_count)
hist(youtube_clean$like_count)
table(youtube_clean$like_count, useNA = "ifany")

cat("=======dislike_count========\n")
is.numeric(youtube_clean$dislike_count)
hist(youtube_clean$dislike_count)
table(youtube_clean$dislike_count, useNA = "ifany")

cat("=======favorite_count========\n")
is.numeric(youtube_clean$favorite_count)
table(youtube_clean$favorite_count, useNA = "ifany")

cat("=======comment_count========\n")
is.numeric(youtube_clean$comment_count)
hist(youtube_clean$comment_count)
table(youtube_clean$comment_count, useNA = "ifany")

cat("=======category_id========\n")
is.numeric(youtube_clean$category_id)
table(youtube_clean$category_id, useNA = "ifany")
```
