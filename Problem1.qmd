---
title: "Problem Set 1"
format: html
editor: visual
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
1 + 1
```

You can add options to executable code like this

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).

Question 1
a
```{r}
file_path <- "./abalone/abalone.data"
abalone <- read.table(file_path, sep = ",")
abalone.names <- c("Sex", "Length", "Diameter","Height","WholeWeight","ShuckedWeight", "VisceraWeight", "ShellWeight", "Rings")
colnames(abalone) <- abalone.names
```

b
```{r}
table(abalone$Sex)
```

c.1.
The Shell Weight has the highest correlation with Rings
```{r}
cor(abalone$ShuckedWeight, abalone$Rings)
cor(abalone$VisceraWeight, abalone$Rings)
cor(abalone$ShellWeight, abalone$Rings)
```

c.2.
The Male has a higher correlation of Shell Weight with Rings.
```{r}
sub_F <- abalone[abalone$Sex == "F",]
sub_I <- abalone[abalone$Sex == "M",]
sub_M <- abalone[abalone$Sex == "I",]
cor(sub_F$ShellWeight, sub_F$Rings)
cor(sub_I$ShellWeight, sub_I$Rings)
cor(sub_M$ShellWeight, sub_M$Rings)
```

c.3
```{r}
abalone[abalone$Rings == max(abalone$Rings),]$WholeWeight
abalone[abalone$Rings == max(abalone$Rings),]$ShuckedWeight
abalone[abalone$Rings == max(abalone$Rings),]$VisceraWeight
abalone[abalone$Rings == max(abalone$Rings),]$ShellWeight
```

c.4
```{r}
weights <- c("WholeWeight", "ShuckedWeight", "VisceraWeight", "ShellWeight")
sexes <- unique(abalone$Sex)

corr_table <- matrix(NA, nrow = length(sexes), ncol = length(weights),
                     dimnames = list(sexes, weights))
for (s in sexes) {
  subdata <- abalone[abalone$Sex == s, ]
  for (w in weights) {
    corr_table[s, w] <- cor(subdata[[w]], subdata$Rings)
  }
}

corr_table
```
c.5.
```{r}
t.test(Rings ~ Sex, data = abalone, subset = Sex %in% c("M","F"))
t.test(Rings ~ Sex, data = abalone, subset = Sex %in% c("M","I"))
t.test(Rings ~ Sex, data = abalone, subset = Sex %in% c("F","I"))
```

Problem 2
a
```{r}
food <- read.csv("food_expenditure.csv")
```

b
```{r}
colnames(food) <- c(
  "ID",
  "Age",
  "HH_Size",        
  "State",
  "Currency",
  "FoodExp_Total",
  "FoodExp_Grocery",
  "FoodExp_Dining",
  "FoodExp_Misc",
  "Dining_Count",
  "Alcohol_Included",
  "Food_Assist"
)
```
c
```{r}
length(food$ID)
USD_food <- food[food$Currency == "USD",]
length(USD_food$ID)
```
d
```{r}
age_criterion <- USD_food$Age <100 & USD_food$Age > 18
valid_states <- c(state.abb, "DC", "PR")
state_criterion <- USD_food$State %in% valid_states

exp_total_num <- as.numeric(USD_food$FoodExp_Total )
expTotal_criterion<- !is.na(exp_total_num) & exp_total_num >= 0 & exp_total_num < 10000 

exp_grocery_num <- as.numeric(USD_food$FoodExp_Grocery )
expGrocery_criterion<- !is.na(exp_grocery_num) & exp_grocery_num >= 0 & exp_grocery_num < 10000 

exp_dining_num <- as.numeric(USD_food$FoodExp_Dining )
expDining_criterion<- !is.na(exp_dining_num) & exp_dining_num >= 0 & exp_dining_num < 10000 

exp_misc_num <- as.numeric(USD_food$FoodExp_Misc )
expmisc_criterion<- !is.na(exp_misc_num) & exp_misc_num >= 0 & exp_misc_num < 10000 


dining_count <- as.numeric(USD_food$Dining_Count)
diningCount_criterion<- !is.na(dining_count) & dining_count >= 0 & dining_count < 10000 

final_food <- USD_food[age_criterion & state_criterion & expTotal_criterion & expGrocery_criterion & expDining_criterion & expmisc_criterion & diningCount_criterion, ]
length(final_food$ID)

```

Problem 3
```{r}


```

